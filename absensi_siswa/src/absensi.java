import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author muhro
 */
public class absensi extends javax.swing.JFrame {

    private final Connection conn;
    
    public absensi() {
        initComponents();
        conn = koneksi.getKoneksi();
        loadClasses();
    }
    
    private void loadClasses() {
        try {
            String query = "SELECT DISTINCT kelas FROM siswa";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                kelas.addItem(rs.getString("kelas"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading classes: " + ex.getMessage());
        }
    }
    
    private void loadDataByClass(String kelas) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        try {
            String query = "SELECT nama, kelas, pertemuan, keterangan FROM siswa WHERE kelas = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, kelas);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("nama"),
                    rs.getString("kelas"),
                    rs.getDate("pertemuan"),
                    rs.getString("keterangan")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading data by class: " + ex.getMessage());
        }
    }
    
    private void loadNamesByClass(String kelas) {
        nama.removeAllItems();
        nama.addItem("-Pilih-");
        try {
            String query = "SELECT DISTINCT nama FROM siswa WHERE kelas = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, kelas);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                nama.addItem(rs.getString("nama"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading names by class: " + ex.getMessage());
        }
    }
    
    private void loadMeetingsByClass(String kelas) {
        pertemuan.removeAllItems();
        pertemuan.addItem("-Pilih-");
        try {
            String query = "SELECT DISTINCT pertemuan FROM siswa WHERE kelas = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, kelas);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                pertemuan.addItem(rs.getString("pertemuan"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading meetings by class: " + ex.getMessage());
        }
    }
    
    private void loadKeterangan(String nama, String kelas, String pertemuan) {
        try {
            String query = "SELECT keterangan FROM siswa WHERE nama = ? AND kelas = ? AND pertemuan = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, nama);
            stmt.setString(2, kelas);
            stmt.setString(3, pertemuan);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                keterangan.setSelectedItem(rs.getString("keterangan"));
            } else {
                keterangan.setSelectedItem("-Pilih-");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading keterangan: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refresh = new javax.swing.JButton();
        nama = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        kelas = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pertemuan = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        keterangan = new javax.swing.JComboBox<>();
        submit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        nama.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Pilih-" }));
        nama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaActionPerformed(evt);
            }
        });

        jLabel1.setText("Nama");

        kelas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Pilih-" }));
        kelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelasActionPerformed(evt);
            }
        });

        jLabel2.setText("Kelas");

        jLabel3.setText("Pertemuan");

        pertemuan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Pilih-" }));
        pertemuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pertemuanActionPerformed(evt);
            }
        });

        jLabel4.setText("Keterangan");

        keterangan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hadir", "Izin", "Sakit", "Alpha" }));
        keterangan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keteranganActionPerformed(evt);
            }
        });

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nama", "Kelas", "Pertemuan", "Keterangan"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(keterangan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(48, 48, 48)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(kelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(submit))
                            .addComponent(refresh))
                        .addGap(52, 52, 52)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pertemuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(kelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(pertemuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keterangan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(15, 15, 15)
                .addComponent(refresh)
                .addGap(18, 18, 18)
                .addComponent(submit)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        String selectedNama = nama.getSelectedItem().toString();
        String selectedKelas = kelas.getSelectedItem().toString();
        String selectedPertemuan = pertemuan.getSelectedItem().toString();
        String selectedKeterangan = keterangan.getSelectedItem().toString();

        try {
            String query = "UPDATE siswa SET keterangan = ? WHERE nama = ? AND kelas = ? AND pertemuan = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, selectedKeterangan);
            stmt.setString(2, selectedNama);
            stmt.setString(3, selectedKelas);
            stmt.setString(4, selectedPertemuan);
            int rowsUpdated = stmt.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Data updated successfully!");
                loadDataByClass(selectedKelas); // Refresh data based on selected class
            } else {
                JOptionPane.showMessageDialog(this, "Data not found or not updated.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error updating data: " + ex.getMessage());
        }
    }//GEN-LAST:event_submitActionPerformed

    private void kelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelasActionPerformed
        // TODO add your handling code here:
        String selectedClass = kelas.getSelectedItem().toString();
        if (!selectedClass.equals("-Pilih-")) {
            loadDataByClass(selectedClass);
            loadNamesByClass(selectedClass);
            loadMeetingsByClass(selectedClass);
        }
    }//GEN-LAST:event_kelasActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        if (!kelas.getSelectedItem().toString().equals("-Pilih-")) {
            loadDataByClass(kelas.getSelectedItem().toString());
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void namaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaActionPerformed
        // TODO add your handling code here:
        if (nama.getSelectedIndex() > 0 && pertemuan.getSelectedIndex() > 0 && kelas.getSelectedIndex() > 0) {
            String selectedNama = nama.getSelectedItem().toString();
            String selectedKelas = kelas.getSelectedItem().toString();
            String selectedPertemuan = pertemuan.getSelectedItem().toString();
            loadKeterangan(selectedNama, selectedKelas, selectedPertemuan);
        }
    }//GEN-LAST:event_namaActionPerformed

    private void pertemuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pertemuanActionPerformed
        // TODO add your handling code here:
        if (nama.getSelectedIndex() > 0 && pertemuan.getSelectedIndex() > 0 && kelas.getSelectedIndex() > 0) {
            String selectedNama = nama.getSelectedItem().toString();
            String selectedKelas = kelas.getSelectedItem().toString();
            String selectedPertemuan = pertemuan.getSelectedItem().toString();
            loadKeterangan(selectedNama, selectedKelas, selectedPertemuan);
        }
    }//GEN-LAST:event_pertemuanActionPerformed

    private void keteranganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keteranganActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keteranganActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(absensi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(absensi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(absensi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(absensi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new absensi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> kelas;
    private javax.swing.JComboBox<String> keterangan;
    private javax.swing.JComboBox<String> nama;
    private javax.swing.JComboBox<String> pertemuan;
    private javax.swing.JButton refresh;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
